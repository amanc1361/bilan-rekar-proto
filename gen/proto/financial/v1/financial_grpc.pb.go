// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/financial/v1/financial.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FinancialService_CreateFinancialPeriod_FullMethodName                                   = "/financial.v1.FinancialService/CreateFinancialPeriod"
	FinancialService_GetFinancialPeriodByID_FullMethodName                                  = "/financial.v1.FinancialService/GetFinancialPeriodByID"
	FinancialService_GetFinancialPeriodByBusinessID_FullMethodName                          = "/financial.v1.FinancialService/GetFinancialPeriodByBusinessID"
	FinancialService_GetFinancialPeriodByUserID_FullMethodName                              = "/financial.v1.FinancialService/GetFinancialPeriodByUserID"
	FinancialService_GetFinancialPeriodByBusinessIDAndUserID_FullMethodName                 = "/financial.v1.FinancialService/GetFinancialPeriodByBusinessIDAndUserID"
	FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriod_FullMethodName        = "/financial.v1.FinancialService/GetFinancialPeriodByBusinessIDAndUserIDAndPeriod"
	FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear_FullMethodName = "/financial.v1.FinancialService/GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear"
	FinancialService_CloseFinancialPeriod_FullMethodName                                    = "/financial.v1.FinancialService/CloseFinancialPeriod"
	FinancialService_ReopenFinancialPeriod_FullMethodName                                   = "/financial.v1.FinancialService/ReopenFinancialPeriod"
	FinancialService_GetFinancialPeriodsByUserID_FullMethodName                             = "/financial.v1.FinancialService/GetFinancialPeriodsByUserID"
	FinancialService_AddUserToFinancialPeriod_FullMethodName                                = "/financial.v1.FinancialService/AddUserToFinancialPeriod"
	FinancialService_RemoveUserFromFinancialPeriod_FullMethodName                           = "/financial.v1.FinancialService/RemoveUserFromFinancialPeriod"
	FinancialService_GetFinancialPeriodsByBusinessID_FullMethodName                         = "/financial.v1.FinancialService/GetFinancialPeriodsByBusinessID"
	FinancialService_AddBusinessToFinancialPeriod_FullMethodName                            = "/financial.v1.FinancialService/AddBusinessToFinancialPeriod"
	FinancialService_RemoveBusinessFromFinancialPeriod_FullMethodName                       = "/financial.v1.FinancialService/RemoveBusinessFromFinancialPeriod"
)

// FinancialServiceClient is the client API for FinancialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Financial service
type FinancialServiceClient interface {
	// Basic CRUD operations
	CreateFinancialPeriod(ctx context.Context, in *CreateFinancialPeriodRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByID(ctx context.Context, in *GetFinancialPeriodByIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	// Financial period queries
	GetFinancialPeriodByBusinessID(ctx context.Context, in *GetFinancialPeriodByBusinessIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByUserID(ctx context.Context, in *GetFinancialPeriodByUserIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByBusinessIDAndUserID(ctx context.Context, in *GetFinancialPeriodByBusinessIDAndUserIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByBusinessIDAndUserIDAndPeriod(ctx context.Context, in *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear(ctx context.Context, in *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYearRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error)
	// Status operations
	CloseFinancialPeriod(ctx context.Context, in *CloseFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ReopenFinancialPeriod(ctx context.Context, in *ReopenFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// User access operations
	GetFinancialPeriodsByUserID(ctx context.Context, in *GetFinancialPeriodsByUserIDRequest, opts ...grpc.CallOption) (*GetFinancialPeriodsResponse, error)
	AddUserToFinancialPeriod(ctx context.Context, in *AddUserToFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RemoveUserFromFinancialPeriod(ctx context.Context, in *RemoveUserFromFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Business access operations
	GetFinancialPeriodsByBusinessID(ctx context.Context, in *GetFinancialPeriodsByBusinessIDRequest, opts ...grpc.CallOption) (*GetFinancialPeriodsResponse, error)
	AddBusinessToFinancialPeriod(ctx context.Context, in *AddBusinessToFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RemoveBusinessFromFinancialPeriod(ctx context.Context, in *RemoveBusinessFromFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type financialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialServiceClient(cc grpc.ClientConnInterface) FinancialServiceClient {
	return &financialServiceClient{cc}
}

func (c *financialServiceClient) CreateFinancialPeriod(ctx context.Context, in *CreateFinancialPeriodRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodByID(ctx context.Context, in *GetFinancialPeriodByIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodByBusinessID(ctx context.Context, in *GetFinancialPeriodByBusinessIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodByBusinessID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodByUserID(ctx context.Context, in *GetFinancialPeriodByUserIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodByBusinessIDAndUserID(ctx context.Context, in *GetFinancialPeriodByBusinessIDAndUserIDRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodByBusinessIDAndUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodByBusinessIDAndUserIDAndPeriod(ctx context.Context, in *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear(ctx context.Context, in *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYearRequest, opts ...grpc.CallOption) (*FinancialPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancialPeriodResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CloseFinancialPeriod(ctx context.Context, in *CloseFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_CloseFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ReopenFinancialPeriod(ctx context.Context, in *ReopenFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_ReopenFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodsByUserID(ctx context.Context, in *GetFinancialPeriodsByUserIDRequest, opts ...grpc.CallOption) (*GetFinancialPeriodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialPeriodsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) AddUserToFinancialPeriod(ctx context.Context, in *AddUserToFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_AddUserToFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) RemoveUserFromFinancialPeriod(ctx context.Context, in *RemoveUserFromFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_RemoveUserFromFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialPeriodsByBusinessID(ctx context.Context, in *GetFinancialPeriodsByBusinessIDRequest, opts ...grpc.CallOption) (*GetFinancialPeriodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialPeriodsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialPeriodsByBusinessID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) AddBusinessToFinancialPeriod(ctx context.Context, in *AddBusinessToFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_AddBusinessToFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) RemoveBusinessFromFinancialPeriod(ctx context.Context, in *RemoveBusinessFromFinancialPeriodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_RemoveBusinessFromFinancialPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialServiceServer is the server API for FinancialService service.
// All implementations must embed UnimplementedFinancialServiceServer
// for forward compatibility.
//
// Financial service
type FinancialServiceServer interface {
	// Basic CRUD operations
	CreateFinancialPeriod(context.Context, *CreateFinancialPeriodRequest) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByID(context.Context, *GetFinancialPeriodByIDRequest) (*FinancialPeriodResponse, error)
	// Financial period queries
	GetFinancialPeriodByBusinessID(context.Context, *GetFinancialPeriodByBusinessIDRequest) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByUserID(context.Context, *GetFinancialPeriodByUserIDRequest) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByBusinessIDAndUserID(context.Context, *GetFinancialPeriodByBusinessIDAndUserIDRequest) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByBusinessIDAndUserIDAndPeriod(context.Context, *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodRequest) (*FinancialPeriodResponse, error)
	GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear(context.Context, *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYearRequest) (*FinancialPeriodResponse, error)
	// Status operations
	CloseFinancialPeriod(context.Context, *CloseFinancialPeriodRequest) (*StatusResponse, error)
	ReopenFinancialPeriod(context.Context, *ReopenFinancialPeriodRequest) (*StatusResponse, error)
	// User access operations
	GetFinancialPeriodsByUserID(context.Context, *GetFinancialPeriodsByUserIDRequest) (*GetFinancialPeriodsResponse, error)
	AddUserToFinancialPeriod(context.Context, *AddUserToFinancialPeriodRequest) (*StatusResponse, error)
	RemoveUserFromFinancialPeriod(context.Context, *RemoveUserFromFinancialPeriodRequest) (*StatusResponse, error)
	// Business access operations
	GetFinancialPeriodsByBusinessID(context.Context, *GetFinancialPeriodsByBusinessIDRequest) (*GetFinancialPeriodsResponse, error)
	AddBusinessToFinancialPeriod(context.Context, *AddBusinessToFinancialPeriodRequest) (*StatusResponse, error)
	RemoveBusinessFromFinancialPeriod(context.Context, *RemoveBusinessFromFinancialPeriodRequest) (*StatusResponse, error)
	mustEmbedUnimplementedFinancialServiceServer()
}

// UnimplementedFinancialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinancialServiceServer struct{}

func (UnimplementedFinancialServiceServer) CreateFinancialPeriod(context.Context, *CreateFinancialPeriodRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodByID(context.Context, *GetFinancialPeriodByIDRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodByID not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodByBusinessID(context.Context, *GetFinancialPeriodByBusinessIDRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodByBusinessID not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodByUserID(context.Context, *GetFinancialPeriodByUserIDRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodByUserID not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodByBusinessIDAndUserID(context.Context, *GetFinancialPeriodByBusinessIDAndUserIDRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodByBusinessIDAndUserID not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodByBusinessIDAndUserIDAndPeriod(context.Context, *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodByBusinessIDAndUserIDAndPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear(context.Context, *GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYearRequest) (*FinancialPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear not implemented")
}
func (UnimplementedFinancialServiceServer) CloseFinancialPeriod(context.Context, *CloseFinancialPeriodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) ReopenFinancialPeriod(context.Context, *ReopenFinancialPeriodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReopenFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodsByUserID(context.Context, *GetFinancialPeriodsByUserIDRequest) (*GetFinancialPeriodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodsByUserID not implemented")
}
func (UnimplementedFinancialServiceServer) AddUserToFinancialPeriod(context.Context, *AddUserToFinancialPeriodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) RemoveUserFromFinancialPeriod(context.Context, *RemoveUserFromFinancialPeriodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialPeriodsByBusinessID(context.Context, *GetFinancialPeriodsByBusinessIDRequest) (*GetFinancialPeriodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialPeriodsByBusinessID not implemented")
}
func (UnimplementedFinancialServiceServer) AddBusinessToFinancialPeriod(context.Context, *AddBusinessToFinancialPeriodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessToFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) RemoveBusinessFromFinancialPeriod(context.Context, *RemoveBusinessFromFinancialPeriodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBusinessFromFinancialPeriod not implemented")
}
func (UnimplementedFinancialServiceServer) mustEmbedUnimplementedFinancialServiceServer() {}
func (UnimplementedFinancialServiceServer) testEmbeddedByValue()                          {}

// UnsafeFinancialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialServiceServer will
// result in compilation errors.
type UnsafeFinancialServiceServer interface {
	mustEmbedUnimplementedFinancialServiceServer()
}

func RegisterFinancialServiceServer(s grpc.ServiceRegistrar, srv FinancialServiceServer) {
	// If the following call pancis, it indicates UnimplementedFinancialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinancialService_ServiceDesc, srv)
}

func _FinancialService_CreateFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateFinancialPeriod(ctx, req.(*CreateFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodByID(ctx, req.(*GetFinancialPeriodByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodByBusinessID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodByBusinessIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodByBusinessID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessID(ctx, req.(*GetFinancialPeriodByBusinessIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodByUserID(ctx, req.(*GetFinancialPeriodByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodByBusinessIDAndUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodByBusinessIDAndUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessIDAndUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodByBusinessIDAndUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessIDAndUserID(ctx, req.(*GetFinancialPeriodByBusinessIDAndUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodByBusinessIDAndUserIDAndPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessIDAndUserIDAndPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessIDAndUserIDAndPeriod(ctx, req.(*GetFinancialPeriodByBusinessIDAndUserIDAndPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear(ctx, req.(*GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CloseFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CloseFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CloseFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CloseFinancialPeriod(ctx, req.(*CloseFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ReopenFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReopenFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ReopenFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ReopenFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ReopenFinancialPeriod(ctx, req.(*ReopenFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodsByUserID(ctx, req.(*GetFinancialPeriodsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_AddUserToFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).AddUserToFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_AddUserToFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).AddUserToFinancialPeriod(ctx, req.(*AddUserToFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_RemoveUserFromFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).RemoveUserFromFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_RemoveUserFromFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).RemoveUserFromFinancialPeriod(ctx, req.(*RemoveUserFromFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialPeriodsByBusinessID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialPeriodsByBusinessIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialPeriodsByBusinessID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialPeriodsByBusinessID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialPeriodsByBusinessID(ctx, req.(*GetFinancialPeriodsByBusinessIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_AddBusinessToFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessToFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).AddBusinessToFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_AddBusinessToFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).AddBusinessToFinancialPeriod(ctx, req.(*AddBusinessToFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_RemoveBusinessFromFinancialPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBusinessFromFinancialPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).RemoveBusinessFromFinancialPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_RemoveBusinessFromFinancialPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).RemoveBusinessFromFinancialPeriod(ctx, req.(*RemoveBusinessFromFinancialPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialService_ServiceDesc is the grpc.ServiceDesc for FinancialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "financial.v1.FinancialService",
	HandlerType: (*FinancialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFinancialPeriod",
			Handler:    _FinancialService_CreateFinancialPeriod_Handler,
		},
		{
			MethodName: "GetFinancialPeriodByID",
			Handler:    _FinancialService_GetFinancialPeriodByID_Handler,
		},
		{
			MethodName: "GetFinancialPeriodByBusinessID",
			Handler:    _FinancialService_GetFinancialPeriodByBusinessID_Handler,
		},
		{
			MethodName: "GetFinancialPeriodByUserID",
			Handler:    _FinancialService_GetFinancialPeriodByUserID_Handler,
		},
		{
			MethodName: "GetFinancialPeriodByBusinessIDAndUserID",
			Handler:    _FinancialService_GetFinancialPeriodByBusinessIDAndUserID_Handler,
		},
		{
			MethodName: "GetFinancialPeriodByBusinessIDAndUserIDAndPeriod",
			Handler:    _FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriod_Handler,
		},
		{
			MethodName: "GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear",
			Handler:    _FinancialService_GetFinancialPeriodByBusinessIDAndUserIDAndPeriodAndYear_Handler,
		},
		{
			MethodName: "CloseFinancialPeriod",
			Handler:    _FinancialService_CloseFinancialPeriod_Handler,
		},
		{
			MethodName: "ReopenFinancialPeriod",
			Handler:    _FinancialService_ReopenFinancialPeriod_Handler,
		},
		{
			MethodName: "GetFinancialPeriodsByUserID",
			Handler:    _FinancialService_GetFinancialPeriodsByUserID_Handler,
		},
		{
			MethodName: "AddUserToFinancialPeriod",
			Handler:    _FinancialService_AddUserToFinancialPeriod_Handler,
		},
		{
			MethodName: "RemoveUserFromFinancialPeriod",
			Handler:    _FinancialService_RemoveUserFromFinancialPeriod_Handler,
		},
		{
			MethodName: "GetFinancialPeriodsByBusinessID",
			Handler:    _FinancialService_GetFinancialPeriodsByBusinessID_Handler,
		},
		{
			MethodName: "AddBusinessToFinancialPeriod",
			Handler:    _FinancialService_AddBusinessToFinancialPeriod_Handler,
		},
		{
			MethodName: "RemoveBusinessFromFinancialPeriod",
			Handler:    _FinancialService_RemoveBusinessFromFinancialPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/financial/v1/financial.proto",
}
