// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/financial/v1/financial.proto

package financialv1

import (
	_ "github.com/amanc1361/bilan-rekar-proto/gen/proto/user/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FinancialPeriod message
type FinancialPeriod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BusinessId    uint32                 `protobuf:"varint,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	IsClosed      bool                   `protobuf:"varint,6,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinancialPeriod) Reset() {
	*x = FinancialPeriod{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialPeriod) ProtoMessage() {}

func (x *FinancialPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialPeriod.ProtoReflect.Descriptor instead.
func (*FinancialPeriod) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{0}
}

func (x *FinancialPeriod) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialPeriod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinancialPeriod) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *FinancialPeriod) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *FinancialPeriod) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *FinancialPeriod) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *FinancialPeriod) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FinancialPeriod) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Basic CRUD messages
type CreateFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BusinessId    uint32                 `protobuf:"varint,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFinancialPeriodRequest) Reset() {
	*x = CreateFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialPeriodRequest) ProtoMessage() {}

func (x *CreateFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*CreateFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFinancialPeriodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFinancialPeriodRequest) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *CreateFinancialPeriodRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreateFinancialPeriodRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type CreateFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        *FinancialPeriod       `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFinancialPeriodResponse) Reset() {
	*x = CreateFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinancialPeriodResponse) ProtoMessage() {}

func (x *CreateFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*CreateFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFinancialPeriodResponse) GetPeriod() *FinancialPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

type GetFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodRequest) Reset() {
	*x = GetFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodRequest) ProtoMessage() {}

func (x *GetFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{3}
}

func (x *GetFinancialPeriodRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        *FinancialPeriod       `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodResponse) Reset() {
	*x = GetFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodResponse) ProtoMessage() {}

func (x *GetFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{4}
}

func (x *GetFinancialPeriodResponse) GetPeriod() *FinancialPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

type UpdateFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        *FinancialPeriod       `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFinancialPeriodRequest) Reset() {
	*x = UpdateFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinancialPeriodRequest) ProtoMessage() {}

func (x *UpdateFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*UpdateFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFinancialPeriodRequest) GetPeriod() *FinancialPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

type UpdateFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        *FinancialPeriod       `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFinancialPeriodResponse) Reset() {
	*x = UpdateFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinancialPeriodResponse) ProtoMessage() {}

func (x *UpdateFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*UpdateFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFinancialPeriodResponse) GetPeriod() *FinancialPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

type DeleteFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFinancialPeriodRequest) Reset() {
	*x = DeleteFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFinancialPeriodRequest) ProtoMessage() {}

func (x *DeleteFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*DeleteFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFinancialPeriodRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFinancialPeriodResponse) Reset() {
	*x = DeleteFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFinancialPeriodResponse) ProtoMessage() {}

func (x *DeleteFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*DeleteFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFinancialPeriodResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListFinancialPeriodsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFinancialPeriodsRequest) Reset() {
	*x = ListFinancialPeriodsRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFinancialPeriodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFinancialPeriodsRequest) ProtoMessage() {}

func (x *ListFinancialPeriodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFinancialPeriodsRequest.ProtoReflect.Descriptor instead.
func (*ListFinancialPeriodsRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{9}
}

func (x *ListFinancialPeriodsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFinancialPeriodsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListFinancialPeriodsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Periods       []*FinancialPeriod     `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFinancialPeriodsResponse) Reset() {
	*x = ListFinancialPeriodsResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFinancialPeriodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFinancialPeriodsResponse) ProtoMessage() {}

func (x *ListFinancialPeriodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFinancialPeriodsResponse.ProtoReflect.Descriptor instead.
func (*ListFinancialPeriodsResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{10}
}

func (x *ListFinancialPeriodsResponse) GetPeriods() []*FinancialPeriod {
	if x != nil {
		return x.Periods
	}
	return nil
}

func (x *ListFinancialPeriodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Business related messages
type GetFinancialPeriodsByBusinessIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BusinessId    uint32                 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	Page          uint32                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodsByBusinessIDRequest) Reset() {
	*x = GetFinancialPeriodsByBusinessIDRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodsByBusinessIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodsByBusinessIDRequest) ProtoMessage() {}

func (x *GetFinancialPeriodsByBusinessIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodsByBusinessIDRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodsByBusinessIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{11}
}

func (x *GetFinancialPeriodsByBusinessIDRequest) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *GetFinancialPeriodsByBusinessIDRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFinancialPeriodsByBusinessIDRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetFinancialPeriodsByBusinessIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Periods       []*FinancialPeriod     `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodsByBusinessIDResponse) Reset() {
	*x = GetFinancialPeriodsByBusinessIDResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodsByBusinessIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodsByBusinessIDResponse) ProtoMessage() {}

func (x *GetFinancialPeriodsByBusinessIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodsByBusinessIDResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodsByBusinessIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{12}
}

func (x *GetFinancialPeriodsByBusinessIDResponse) GetPeriods() []*FinancialPeriod {
	if x != nil {
		return x.Periods
	}
	return nil
}

func (x *GetFinancialPeriodsByBusinessIDResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetActiveFinancialPeriodsByBusinessIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BusinessId    uint32                 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	Page          uint32                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveFinancialPeriodsByBusinessIDRequest) Reset() {
	*x = GetActiveFinancialPeriodsByBusinessIDRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveFinancialPeriodsByBusinessIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveFinancialPeriodsByBusinessIDRequest) ProtoMessage() {}

func (x *GetActiveFinancialPeriodsByBusinessIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveFinancialPeriodsByBusinessIDRequest.ProtoReflect.Descriptor instead.
func (*GetActiveFinancialPeriodsByBusinessIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{13}
}

func (x *GetActiveFinancialPeriodsByBusinessIDRequest) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *GetActiveFinancialPeriodsByBusinessIDRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetActiveFinancialPeriodsByBusinessIDRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetActiveFinancialPeriodsByBusinessIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Periods       []*FinancialPeriod     `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveFinancialPeriodsByBusinessIDResponse) Reset() {
	*x = GetActiveFinancialPeriodsByBusinessIDResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveFinancialPeriodsByBusinessIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveFinancialPeriodsByBusinessIDResponse) ProtoMessage() {}

func (x *GetActiveFinancialPeriodsByBusinessIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveFinancialPeriodsByBusinessIDResponse.ProtoReflect.Descriptor instead.
func (*GetActiveFinancialPeriodsByBusinessIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{14}
}

func (x *GetActiveFinancialPeriodsByBusinessIDResponse) GetPeriods() []*FinancialPeriod {
	if x != nil {
		return x.Periods
	}
	return nil
}

func (x *GetActiveFinancialPeriodsByBusinessIDResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFinancialPeriodByBusinessAndNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BusinessId    uint32                 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodByBusinessAndNameRequest) Reset() {
	*x = GetFinancialPeriodByBusinessAndNameRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodByBusinessAndNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodByBusinessAndNameRequest) ProtoMessage() {}

func (x *GetFinancialPeriodByBusinessAndNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodByBusinessAndNameRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodByBusinessAndNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{15}
}

func (x *GetFinancialPeriodByBusinessAndNameRequest) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *GetFinancialPeriodByBusinessAndNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Time related messages
type GetFinancialPeriodsByDateRangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page          uint32                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodsByDateRangeRequest) Reset() {
	*x = GetFinancialPeriodsByDateRangeRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodsByDateRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodsByDateRangeRequest) ProtoMessage() {}

func (x *GetFinancialPeriodsByDateRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodsByDateRangeRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodsByDateRangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{16}
}

func (x *GetFinancialPeriodsByDateRangeRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetFinancialPeriodsByDateRangeRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetFinancialPeriodsByDateRangeRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFinancialPeriodsByDateRangeRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetFinancialPeriodsByDateRangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Periods       []*FinancialPeriod     `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodsByDateRangeResponse) Reset() {
	*x = GetFinancialPeriodsByDateRangeResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodsByDateRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodsByDateRangeResponse) ProtoMessage() {}

func (x *GetFinancialPeriodsByDateRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodsByDateRangeResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodsByDateRangeResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{17}
}

func (x *GetFinancialPeriodsByDateRangeResponse) GetPeriods() []*FinancialPeriod {
	if x != nil {
		return x.Periods
	}
	return nil
}

func (x *GetFinancialPeriodsByDateRangeResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetOverlappingFinancialPeriodsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BusinessId    uint32                 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOverlappingFinancialPeriodsRequest) Reset() {
	*x = GetOverlappingFinancialPeriodsRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverlappingFinancialPeriodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverlappingFinancialPeriodsRequest) ProtoMessage() {}

func (x *GetOverlappingFinancialPeriodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverlappingFinancialPeriodsRequest.ProtoReflect.Descriptor instead.
func (*GetOverlappingFinancialPeriodsRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{18}
}

func (x *GetOverlappingFinancialPeriodsRequest) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *GetOverlappingFinancialPeriodsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetOverlappingFinancialPeriodsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type GetOverlappingFinancialPeriodsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Periods       []*FinancialPeriod     `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOverlappingFinancialPeriodsResponse) Reset() {
	*x = GetOverlappingFinancialPeriodsResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOverlappingFinancialPeriodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverlappingFinancialPeriodsResponse) ProtoMessage() {}

func (x *GetOverlappingFinancialPeriodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverlappingFinancialPeriodsResponse.ProtoReflect.Descriptor instead.
func (*GetOverlappingFinancialPeriodsResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{19}
}

func (x *GetOverlappingFinancialPeriodsResponse) GetPeriods() []*FinancialPeriod {
	if x != nil {
		return x.Periods
	}
	return nil
}

func (x *GetOverlappingFinancialPeriodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Status operation messages
type CloseFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseFinancialPeriodRequest) Reset() {
	*x = CloseFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseFinancialPeriodRequest) ProtoMessage() {}

func (x *CloseFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*CloseFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{20}
}

func (x *CloseFinancialPeriodRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CloseFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseFinancialPeriodResponse) Reset() {
	*x = CloseFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseFinancialPeriodResponse) ProtoMessage() {}

func (x *CloseFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*CloseFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{21}
}

func (x *CloseFinancialPeriodResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReopenFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReopenFinancialPeriodRequest) Reset() {
	*x = ReopenFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReopenFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenFinancialPeriodRequest) ProtoMessage() {}

func (x *ReopenFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*ReopenFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{22}
}

func (x *ReopenFinancialPeriodRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ReopenFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReopenFinancialPeriodResponse) Reset() {
	*x = ReopenFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReopenFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenFinancialPeriodResponse) ProtoMessage() {}

func (x *ReopenFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*ReopenFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{23}
}

func (x *ReopenFinancialPeriodResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// User access messages
type GetFinancialPeriodsByUserIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page          uint32                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodsByUserIDRequest) Reset() {
	*x = GetFinancialPeriodsByUserIDRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodsByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodsByUserIDRequest) ProtoMessage() {}

func (x *GetFinancialPeriodsByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodsByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodsByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{24}
}

func (x *GetFinancialPeriodsByUserIDRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFinancialPeriodsByUserIDRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFinancialPeriodsByUserIDRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetFinancialPeriodsByUserIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Periods       []*FinancialPeriod     `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFinancialPeriodsByUserIDResponse) Reset() {
	*x = GetFinancialPeriodsByUserIDResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFinancialPeriodsByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialPeriodsByUserIDResponse) ProtoMessage() {}

func (x *GetFinancialPeriodsByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialPeriodsByUserIDResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialPeriodsByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{25}
}

func (x *GetFinancialPeriodsByUserIDResponse) GetPeriods() []*FinancialPeriod {
	if x != nil {
		return x.Periods
	}
	return nil
}

func (x *GetFinancialPeriodsByUserIDResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddUserToFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeriodId      uint32                 `protobuf:"varint,1,opt,name=period_id,json=periodId,proto3" json:"period_id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserToFinancialPeriodRequest) Reset() {
	*x = AddUserToFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToFinancialPeriodRequest) ProtoMessage() {}

func (x *AddUserToFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*AddUserToFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{26}
}

func (x *AddUserToFinancialPeriodRequest) GetPeriodId() uint32 {
	if x != nil {
		return x.PeriodId
	}
	return 0
}

func (x *AddUserToFinancialPeriodRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AddUserToFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserToFinancialPeriodResponse) Reset() {
	*x = AddUserToFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToFinancialPeriodResponse) ProtoMessage() {}

func (x *AddUserToFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*AddUserToFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{27}
}

func (x *AddUserToFinancialPeriodResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RemoveUserFromFinancialPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeriodId      uint32                 `protobuf:"varint,1,opt,name=period_id,json=periodId,proto3" json:"period_id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserFromFinancialPeriodRequest) Reset() {
	*x = RemoveUserFromFinancialPeriodRequest{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromFinancialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromFinancialPeriodRequest) ProtoMessage() {}

func (x *RemoveUserFromFinancialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromFinancialPeriodRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserFromFinancialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveUserFromFinancialPeriodRequest) GetPeriodId() uint32 {
	if x != nil {
		return x.PeriodId
	}
	return 0
}

func (x *RemoveUserFromFinancialPeriodRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RemoveUserFromFinancialPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserFromFinancialPeriodResponse) Reset() {
	*x = RemoveUserFromFinancialPeriodResponse{}
	mi := &file_proto_financial_v1_financial_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromFinancialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromFinancialPeriodResponse) ProtoMessage() {}

func (x *RemoveUserFromFinancialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_financial_v1_financial_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromFinancialPeriodResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserFromFinancialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_proto_financial_v1_financial_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveUserFromFinancialPeriodResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_proto_financial_v1_financial_proto protoreflect.FileDescriptor

var file_proto_financial_v1_financial_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x55, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x56, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x2e, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7a, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x78, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x80, 0x01, 0x0a,
	0x2c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x7e, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x61, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x77, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2d,
	0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a,
	0x1c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x6f, 0x70, 0x65,
	0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x52, 0x65, 0x6f, 0x70, 0x65,
	0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x6e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x74, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x57, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x3c, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x5c, 0x0a, 0x24, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x32, 0xac, 0x0f, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x34, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73,
	0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x12, 0x3a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x33, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x29, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x52, 0x65,
	0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x30,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0xa8, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6c, 0x61, 0x6e, 0x2d, 0x72, 0x65, 0x6b, 0x61, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58,
	0x58, 0xaa, 0x02, 0x0c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_proto_financial_v1_financial_proto_rawDescOnce sync.Once
	file_proto_financial_v1_financial_proto_rawDescData []byte
)

func file_proto_financial_v1_financial_proto_rawDescGZIP() []byte {
	file_proto_financial_v1_financial_proto_rawDescOnce.Do(func() {
		file_proto_financial_v1_financial_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_financial_v1_financial_proto_rawDesc), len(file_proto_financial_v1_financial_proto_rawDesc)))
	})
	return file_proto_financial_v1_financial_proto_rawDescData
}

var file_proto_financial_v1_financial_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_financial_v1_financial_proto_goTypes = []any{
	(*FinancialPeriod)(nil),                               // 0: financial.v1.FinancialPeriod
	(*CreateFinancialPeriodRequest)(nil),                  // 1: financial.v1.CreateFinancialPeriodRequest
	(*CreateFinancialPeriodResponse)(nil),                 // 2: financial.v1.CreateFinancialPeriodResponse
	(*GetFinancialPeriodRequest)(nil),                     // 3: financial.v1.GetFinancialPeriodRequest
	(*GetFinancialPeriodResponse)(nil),                    // 4: financial.v1.GetFinancialPeriodResponse
	(*UpdateFinancialPeriodRequest)(nil),                  // 5: financial.v1.UpdateFinancialPeriodRequest
	(*UpdateFinancialPeriodResponse)(nil),                 // 6: financial.v1.UpdateFinancialPeriodResponse
	(*DeleteFinancialPeriodRequest)(nil),                  // 7: financial.v1.DeleteFinancialPeriodRequest
	(*DeleteFinancialPeriodResponse)(nil),                 // 8: financial.v1.DeleteFinancialPeriodResponse
	(*ListFinancialPeriodsRequest)(nil),                   // 9: financial.v1.ListFinancialPeriodsRequest
	(*ListFinancialPeriodsResponse)(nil),                  // 10: financial.v1.ListFinancialPeriodsResponse
	(*GetFinancialPeriodsByBusinessIDRequest)(nil),        // 11: financial.v1.GetFinancialPeriodsByBusinessIDRequest
	(*GetFinancialPeriodsByBusinessIDResponse)(nil),       // 12: financial.v1.GetFinancialPeriodsByBusinessIDResponse
	(*GetActiveFinancialPeriodsByBusinessIDRequest)(nil),  // 13: financial.v1.GetActiveFinancialPeriodsByBusinessIDRequest
	(*GetActiveFinancialPeriodsByBusinessIDResponse)(nil), // 14: financial.v1.GetActiveFinancialPeriodsByBusinessIDResponse
	(*GetFinancialPeriodByBusinessAndNameRequest)(nil),    // 15: financial.v1.GetFinancialPeriodByBusinessAndNameRequest
	(*GetFinancialPeriodsByDateRangeRequest)(nil),         // 16: financial.v1.GetFinancialPeriodsByDateRangeRequest
	(*GetFinancialPeriodsByDateRangeResponse)(nil),        // 17: financial.v1.GetFinancialPeriodsByDateRangeResponse
	(*GetOverlappingFinancialPeriodsRequest)(nil),         // 18: financial.v1.GetOverlappingFinancialPeriodsRequest
	(*GetOverlappingFinancialPeriodsResponse)(nil),        // 19: financial.v1.GetOverlappingFinancialPeriodsResponse
	(*CloseFinancialPeriodRequest)(nil),                   // 20: financial.v1.CloseFinancialPeriodRequest
	(*CloseFinancialPeriodResponse)(nil),                  // 21: financial.v1.CloseFinancialPeriodResponse
	(*ReopenFinancialPeriodRequest)(nil),                  // 22: financial.v1.ReopenFinancialPeriodRequest
	(*ReopenFinancialPeriodResponse)(nil),                 // 23: financial.v1.ReopenFinancialPeriodResponse
	(*GetFinancialPeriodsByUserIDRequest)(nil),            // 24: financial.v1.GetFinancialPeriodsByUserIDRequest
	(*GetFinancialPeriodsByUserIDResponse)(nil),           // 25: financial.v1.GetFinancialPeriodsByUserIDResponse
	(*AddUserToFinancialPeriodRequest)(nil),               // 26: financial.v1.AddUserToFinancialPeriodRequest
	(*AddUserToFinancialPeriodResponse)(nil),              // 27: financial.v1.AddUserToFinancialPeriodResponse
	(*RemoveUserFromFinancialPeriodRequest)(nil),          // 28: financial.v1.RemoveUserFromFinancialPeriodRequest
	(*RemoveUserFromFinancialPeriodResponse)(nil),         // 29: financial.v1.RemoveUserFromFinancialPeriodResponse
	(*timestamppb.Timestamp)(nil),                         // 30: google.protobuf.Timestamp
}
var file_proto_financial_v1_financial_proto_depIdxs = []int32{
	30, // 0: financial.v1.FinancialPeriod.start_date:type_name -> google.protobuf.Timestamp
	30, // 1: financial.v1.FinancialPeriod.end_date:type_name -> google.protobuf.Timestamp
	30, // 2: financial.v1.FinancialPeriod.created_at:type_name -> google.protobuf.Timestamp
	30, // 3: financial.v1.FinancialPeriod.updated_at:type_name -> google.protobuf.Timestamp
	30, // 4: financial.v1.CreateFinancialPeriodRequest.start_date:type_name -> google.protobuf.Timestamp
	30, // 5: financial.v1.CreateFinancialPeriodRequest.end_date:type_name -> google.protobuf.Timestamp
	0,  // 6: financial.v1.CreateFinancialPeriodResponse.period:type_name -> financial.v1.FinancialPeriod
	0,  // 7: financial.v1.GetFinancialPeriodResponse.period:type_name -> financial.v1.FinancialPeriod
	0,  // 8: financial.v1.UpdateFinancialPeriodRequest.period:type_name -> financial.v1.FinancialPeriod
	0,  // 9: financial.v1.UpdateFinancialPeriodResponse.period:type_name -> financial.v1.FinancialPeriod
	0,  // 10: financial.v1.ListFinancialPeriodsResponse.periods:type_name -> financial.v1.FinancialPeriod
	0,  // 11: financial.v1.GetFinancialPeriodsByBusinessIDResponse.periods:type_name -> financial.v1.FinancialPeriod
	0,  // 12: financial.v1.GetActiveFinancialPeriodsByBusinessIDResponse.periods:type_name -> financial.v1.FinancialPeriod
	30, // 13: financial.v1.GetFinancialPeriodsByDateRangeRequest.start_date:type_name -> google.protobuf.Timestamp
	30, // 14: financial.v1.GetFinancialPeriodsByDateRangeRequest.end_date:type_name -> google.protobuf.Timestamp
	0,  // 15: financial.v1.GetFinancialPeriodsByDateRangeResponse.periods:type_name -> financial.v1.FinancialPeriod
	30, // 16: financial.v1.GetOverlappingFinancialPeriodsRequest.start_date:type_name -> google.protobuf.Timestamp
	30, // 17: financial.v1.GetOverlappingFinancialPeriodsRequest.end_date:type_name -> google.protobuf.Timestamp
	0,  // 18: financial.v1.GetOverlappingFinancialPeriodsResponse.periods:type_name -> financial.v1.FinancialPeriod
	0,  // 19: financial.v1.GetFinancialPeriodsByUserIDResponse.periods:type_name -> financial.v1.FinancialPeriod
	1,  // 20: financial.v1.FinancialPeriodService.CreateFinancialPeriod:input_type -> financial.v1.CreateFinancialPeriodRequest
	3,  // 21: financial.v1.FinancialPeriodService.GetFinancialPeriod:input_type -> financial.v1.GetFinancialPeriodRequest
	5,  // 22: financial.v1.FinancialPeriodService.UpdateFinancialPeriod:input_type -> financial.v1.UpdateFinancialPeriodRequest
	7,  // 23: financial.v1.FinancialPeriodService.DeleteFinancialPeriod:input_type -> financial.v1.DeleteFinancialPeriodRequest
	9,  // 24: financial.v1.FinancialPeriodService.ListFinancialPeriods:input_type -> financial.v1.ListFinancialPeriodsRequest
	11, // 25: financial.v1.FinancialPeriodService.GetFinancialPeriodsByBusinessID:input_type -> financial.v1.GetFinancialPeriodsByBusinessIDRequest
	13, // 26: financial.v1.FinancialPeriodService.GetActiveFinancialPeriodsByBusinessID:input_type -> financial.v1.GetActiveFinancialPeriodsByBusinessIDRequest
	15, // 27: financial.v1.FinancialPeriodService.GetFinancialPeriodByBusinessAndName:input_type -> financial.v1.GetFinancialPeriodByBusinessAndNameRequest
	16, // 28: financial.v1.FinancialPeriodService.GetFinancialPeriodsByDateRange:input_type -> financial.v1.GetFinancialPeriodsByDateRangeRequest
	18, // 29: financial.v1.FinancialPeriodService.GetOverlappingFinancialPeriods:input_type -> financial.v1.GetOverlappingFinancialPeriodsRequest
	20, // 30: financial.v1.FinancialPeriodService.CloseFinancialPeriod:input_type -> financial.v1.CloseFinancialPeriodRequest
	22, // 31: financial.v1.FinancialPeriodService.ReopenFinancialPeriod:input_type -> financial.v1.ReopenFinancialPeriodRequest
	24, // 32: financial.v1.FinancialPeriodService.GetFinancialPeriodsByUserID:input_type -> financial.v1.GetFinancialPeriodsByUserIDRequest
	26, // 33: financial.v1.FinancialPeriodService.AddUserToFinancialPeriod:input_type -> financial.v1.AddUserToFinancialPeriodRequest
	28, // 34: financial.v1.FinancialPeriodService.RemoveUserFromFinancialPeriod:input_type -> financial.v1.RemoveUserFromFinancialPeriodRequest
	2,  // 35: financial.v1.FinancialPeriodService.CreateFinancialPeriod:output_type -> financial.v1.CreateFinancialPeriodResponse
	4,  // 36: financial.v1.FinancialPeriodService.GetFinancialPeriod:output_type -> financial.v1.GetFinancialPeriodResponse
	6,  // 37: financial.v1.FinancialPeriodService.UpdateFinancialPeriod:output_type -> financial.v1.UpdateFinancialPeriodResponse
	8,  // 38: financial.v1.FinancialPeriodService.DeleteFinancialPeriod:output_type -> financial.v1.DeleteFinancialPeriodResponse
	10, // 39: financial.v1.FinancialPeriodService.ListFinancialPeriods:output_type -> financial.v1.ListFinancialPeriodsResponse
	12, // 40: financial.v1.FinancialPeriodService.GetFinancialPeriodsByBusinessID:output_type -> financial.v1.GetFinancialPeriodsByBusinessIDResponse
	14, // 41: financial.v1.FinancialPeriodService.GetActiveFinancialPeriodsByBusinessID:output_type -> financial.v1.GetActiveFinancialPeriodsByBusinessIDResponse
	4,  // 42: financial.v1.FinancialPeriodService.GetFinancialPeriodByBusinessAndName:output_type -> financial.v1.GetFinancialPeriodResponse
	17, // 43: financial.v1.FinancialPeriodService.GetFinancialPeriodsByDateRange:output_type -> financial.v1.GetFinancialPeriodsByDateRangeResponse
	19, // 44: financial.v1.FinancialPeriodService.GetOverlappingFinancialPeriods:output_type -> financial.v1.GetOverlappingFinancialPeriodsResponse
	21, // 45: financial.v1.FinancialPeriodService.CloseFinancialPeriod:output_type -> financial.v1.CloseFinancialPeriodResponse
	23, // 46: financial.v1.FinancialPeriodService.ReopenFinancialPeriod:output_type -> financial.v1.ReopenFinancialPeriodResponse
	25, // 47: financial.v1.FinancialPeriodService.GetFinancialPeriodsByUserID:output_type -> financial.v1.GetFinancialPeriodsByUserIDResponse
	27, // 48: financial.v1.FinancialPeriodService.AddUserToFinancialPeriod:output_type -> financial.v1.AddUserToFinancialPeriodResponse
	29, // 49: financial.v1.FinancialPeriodService.RemoveUserFromFinancialPeriod:output_type -> financial.v1.RemoveUserFromFinancialPeriodResponse
	35, // [35:50] is the sub-list for method output_type
	20, // [20:35] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_financial_v1_financial_proto_init() }
func file_proto_financial_v1_financial_proto_init() {
	if File_proto_financial_v1_financial_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_financial_v1_financial_proto_rawDesc), len(file_proto_financial_v1_financial_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_financial_v1_financial_proto_goTypes,
		DependencyIndexes: file_proto_financial_v1_financial_proto_depIdxs,
		MessageInfos:      file_proto_financial_v1_financial_proto_msgTypes,
	}.Build()
	File_proto_financial_v1_financial_proto = out.File
	file_proto_financial_v1_financial_proto_goTypes = nil
	file_proto_financial_v1_financial_proto_depIdxs = nil
}
