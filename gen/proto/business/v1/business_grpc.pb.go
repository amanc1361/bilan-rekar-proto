// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/business/v1/business.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessService_CreateBusiness_FullMethodName                  = "/business.BusinessService/CreateBusiness"
	BusinessService_GetBusinessByID_FullMethodName                 = "/business.BusinessService/GetBusinessByID"
	BusinessService_GetBusinessesByOwnerID_FullMethodName          = "/business.BusinessService/GetBusinessesByOwnerID"
	BusinessService_GetBusinessByName_FullMethodName               = "/business.BusinessService/GetBusinessByName"
	BusinessService_GetBusinessWithUsers_FullMethodName            = "/business.BusinessService/GetBusinessWithUsers"
	BusinessService_GetBusinessWithFinancialPeriods_FullMethodName = "/business.BusinessService/GetBusinessWithFinancialPeriods"
	BusinessService_AddUserToBusiness_FullMethodName               = "/business.BusinessService/AddUserToBusiness"
	BusinessService_RemoveUserFromBusiness_FullMethodName          = "/business.BusinessService/RemoveUserFromBusiness"
	BusinessService_GetBusinessUsers_FullMethodName                = "/business.BusinessService/GetBusinessUsers"
	BusinessService_GetBusinessFinancialPeriods_FullMethodName     = "/business.BusinessService/GetBusinessFinancialPeriods"
)

// BusinessServiceClient is the client API for BusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Business service
type BusinessServiceClient interface {
	// Basic CRUD operations
	CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*BusinessResponse, error)
	GetBusinessByID(ctx context.Context, in *GetBusinessByIDRequest, opts ...grpc.CallOption) (*BusinessResponse, error)
	// Business specific operations
	GetBusinessesByOwnerID(ctx context.Context, in *GetBusinessesByOwnerIDRequest, opts ...grpc.CallOption) (*GetBusinessesByOwnerIDResponse, error)
	GetBusinessByName(ctx context.Context, in *GetBusinessByNameRequest, opts ...grpc.CallOption) (*BusinessResponse, error)
	GetBusinessWithUsers(ctx context.Context, in *GetBusinessWithUsersRequest, opts ...grpc.CallOption) (*GetBusinessWithUsersResponse, error)
	GetBusinessWithFinancialPeriods(ctx context.Context, in *GetBusinessWithFinancialPeriodsRequest, opts ...grpc.CallOption) (*GetBusinessWithFinancialPeriodsResponse, error)
	// User management
	AddUserToBusiness(ctx context.Context, in *AddUserToBusinessRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RemoveUserFromBusiness(ctx context.Context, in *RemoveUserFromBusinessRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetBusinessUsers(ctx context.Context, in *GetBusinessUsersRequest, opts ...grpc.CallOption) (*GetBusinessUsersResponse, error)
	// Financial period management
	GetBusinessFinancialPeriods(ctx context.Context, in *GetBusinessFinancialPeriodsRequest, opts ...grpc.CallOption) (*GetBusinessFinancialPeriodsResponse, error)
}

type businessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessServiceClient(cc grpc.ClientConnInterface) BusinessServiceClient {
	return &businessServiceClient{cc}
}

func (c *businessServiceClient) CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*BusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, BusinessService_CreateBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessByID(ctx context.Context, in *GetBusinessByIDRequest, opts ...grpc.CallOption) (*BusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessesByOwnerID(ctx context.Context, in *GetBusinessesByOwnerIDRequest, opts ...grpc.CallOption) (*GetBusinessesByOwnerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessesByOwnerIDResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessesByOwnerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessByName(ctx context.Context, in *GetBusinessByNameRequest, opts ...grpc.CallOption) (*BusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessWithUsers(ctx context.Context, in *GetBusinessWithUsersRequest, opts ...grpc.CallOption) (*GetBusinessWithUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessWithUsersResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessWithUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessWithFinancialPeriods(ctx context.Context, in *GetBusinessWithFinancialPeriodsRequest, opts ...grpc.CallOption) (*GetBusinessWithFinancialPeriodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessWithFinancialPeriodsResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessWithFinancialPeriods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) AddUserToBusiness(ctx context.Context, in *AddUserToBusinessRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, BusinessService_AddUserToBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) RemoveUserFromBusiness(ctx context.Context, in *RemoveUserFromBusinessRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, BusinessService_RemoveUserFromBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessUsers(ctx context.Context, in *GetBusinessUsersRequest, opts ...grpc.CallOption) (*GetBusinessUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessUsersResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetBusinessFinancialPeriods(ctx context.Context, in *GetBusinessFinancialPeriodsRequest, opts ...grpc.CallOption) (*GetBusinessFinancialPeriodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessFinancialPeriodsResponse)
	err := c.cc.Invoke(ctx, BusinessService_GetBusinessFinancialPeriods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServiceServer is the server API for BusinessService service.
// All implementations must embed UnimplementedBusinessServiceServer
// for forward compatibility.
//
// Business service
type BusinessServiceServer interface {
	// Basic CRUD operations
	CreateBusiness(context.Context, *CreateBusinessRequest) (*BusinessResponse, error)
	GetBusinessByID(context.Context, *GetBusinessByIDRequest) (*BusinessResponse, error)
	// Business specific operations
	GetBusinessesByOwnerID(context.Context, *GetBusinessesByOwnerIDRequest) (*GetBusinessesByOwnerIDResponse, error)
	GetBusinessByName(context.Context, *GetBusinessByNameRequest) (*BusinessResponse, error)
	GetBusinessWithUsers(context.Context, *GetBusinessWithUsersRequest) (*GetBusinessWithUsersResponse, error)
	GetBusinessWithFinancialPeriods(context.Context, *GetBusinessWithFinancialPeriodsRequest) (*GetBusinessWithFinancialPeriodsResponse, error)
	// User management
	AddUserToBusiness(context.Context, *AddUserToBusinessRequest) (*StatusResponse, error)
	RemoveUserFromBusiness(context.Context, *RemoveUserFromBusinessRequest) (*StatusResponse, error)
	GetBusinessUsers(context.Context, *GetBusinessUsersRequest) (*GetBusinessUsersResponse, error)
	// Financial period management
	GetBusinessFinancialPeriods(context.Context, *GetBusinessFinancialPeriodsRequest) (*GetBusinessFinancialPeriodsResponse, error)
	mustEmbedUnimplementedBusinessServiceServer()
}

// UnimplementedBusinessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessServiceServer struct{}

func (UnimplementedBusinessServiceServer) CreateBusiness(context.Context, *CreateBusinessRequest) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusiness not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessByID(context.Context, *GetBusinessByIDRequest) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessByID not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessesByOwnerID(context.Context, *GetBusinessesByOwnerIDRequest) (*GetBusinessesByOwnerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessesByOwnerID not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessByName(context.Context, *GetBusinessByNameRequest) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessByName not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessWithUsers(context.Context, *GetBusinessWithUsersRequest) (*GetBusinessWithUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessWithUsers not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessWithFinancialPeriods(context.Context, *GetBusinessWithFinancialPeriodsRequest) (*GetBusinessWithFinancialPeriodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessWithFinancialPeriods not implemented")
}
func (UnimplementedBusinessServiceServer) AddUserToBusiness(context.Context, *AddUserToBusinessRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToBusiness not implemented")
}
func (UnimplementedBusinessServiceServer) RemoveUserFromBusiness(context.Context, *RemoveUserFromBusinessRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromBusiness not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessUsers(context.Context, *GetBusinessUsersRequest) (*GetBusinessUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUsers not implemented")
}
func (UnimplementedBusinessServiceServer) GetBusinessFinancialPeriods(context.Context, *GetBusinessFinancialPeriodsRequest) (*GetBusinessFinancialPeriodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessFinancialPeriods not implemented")
}
func (UnimplementedBusinessServiceServer) mustEmbedUnimplementedBusinessServiceServer() {}
func (UnimplementedBusinessServiceServer) testEmbeddedByValue()                         {}

// UnsafeBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServiceServer will
// result in compilation errors.
type UnsafeBusinessServiceServer interface {
	mustEmbedUnimplementedBusinessServiceServer()
}

func RegisterBusinessServiceServer(s grpc.ServiceRegistrar, srv BusinessServiceServer) {
	// If the following call pancis, it indicates UnimplementedBusinessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessService_ServiceDesc, srv)
}

func _BusinessService_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_CreateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).CreateBusiness(ctx, req.(*CreateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessByID(ctx, req.(*GetBusinessByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessesByOwnerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessesByOwnerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessesByOwnerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessesByOwnerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessesByOwnerID(ctx, req.(*GetBusinessesByOwnerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessByName(ctx, req.(*GetBusinessByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessWithUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessWithUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessWithUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessWithUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessWithUsers(ctx, req.(*GetBusinessWithUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessWithFinancialPeriods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessWithFinancialPeriodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessWithFinancialPeriods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessWithFinancialPeriods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessWithFinancialPeriods(ctx, req.(*GetBusinessWithFinancialPeriodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_AddUserToBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).AddUserToBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_AddUserToBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).AddUserToBusiness(ctx, req.(*AddUserToBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_RemoveUserFromBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).RemoveUserFromBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_RemoveUserFromBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).RemoveUserFromBusiness(ctx, req.(*RemoveUserFromBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessUsers(ctx, req.(*GetBusinessUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetBusinessFinancialPeriods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessFinancialPeriodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetBusinessFinancialPeriods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessService_GetBusinessFinancialPeriods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetBusinessFinancialPeriods(ctx, req.(*GetBusinessFinancialPeriodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessService_ServiceDesc is the grpc.ServiceDesc for BusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business.BusinessService",
	HandlerType: (*BusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusiness",
			Handler:    _BusinessService_CreateBusiness_Handler,
		},
		{
			MethodName: "GetBusinessByID",
			Handler:    _BusinessService_GetBusinessByID_Handler,
		},
		{
			MethodName: "GetBusinessesByOwnerID",
			Handler:    _BusinessService_GetBusinessesByOwnerID_Handler,
		},
		{
			MethodName: "GetBusinessByName",
			Handler:    _BusinessService_GetBusinessByName_Handler,
		},
		{
			MethodName: "GetBusinessWithUsers",
			Handler:    _BusinessService_GetBusinessWithUsers_Handler,
		},
		{
			MethodName: "GetBusinessWithFinancialPeriods",
			Handler:    _BusinessService_GetBusinessWithFinancialPeriods_Handler,
		},
		{
			MethodName: "AddUserToBusiness",
			Handler:    _BusinessService_AddUserToBusiness_Handler,
		},
		{
			MethodName: "RemoveUserFromBusiness",
			Handler:    _BusinessService_RemoveUserFromBusiness_Handler,
		},
		{
			MethodName: "GetBusinessUsers",
			Handler:    _BusinessService_GetBusinessUsers_Handler,
		},
		{
			MethodName: "GetBusinessFinancialPeriods",
			Handler:    _BusinessService_GetBusinessFinancialPeriods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/business/v1/business.proto",
}
