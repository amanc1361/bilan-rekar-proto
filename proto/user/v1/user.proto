syntax = "proto3";

package user;

option go_package = "github.com/amanc1361/bilan-rekar-proto/gen/proto/user/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// User message represents a user entity
message User {
  uint64 id = 1;
  string name = 2;
  string family = 3;
  string mobile = 4;
  optional string email = 5;
  optional string username = 6;
  // Password is not included in responses
  string password = 7;
  uint64 role_id = 8;
  Role role = 9;

}

// Role message represents a user role
message Role {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  repeated string permissions = 4;
}

// Step 1: Mobile Registration
message RegisterMobileRequest {
  string mobile = 1;
}

message RegisterMobileResponse {
  string mobile = 1;
  string message = 2;
  bool success = 3;
}

// Step 2: Verify OTP and create account with username/password
message VerifyAndCreateUserRequest {
  string mobile = 1;
  string otp = 2;
  string username = 3;
  string password = 4;
  // Optional fields that can be set at this stage
  optional string name = 5;
  optional string family = 6;
  optional string email = 7;
}

message VerifyAndCreateUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

// Step 3: Admin creating another user (simplified process)
message AdminCreateUserRequest {
  uint64 admin_id = 1;      // ID of the admin creating this user
  string mobile = 2;        // Only required field for a new user
  
  // All other fields are optional
  optional string name = 3;
  optional string family = 4;
  optional string email = 5;
  optional string username = 6;
  optional string password = 7;
  optional uint64 role_id = 8;
 
}

message AdminCreateUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

// Request and response messages for UserService
message GetUserByIDRequest {
  string id = 1;
}

message CreateUserRequest {
  // Only required fields for user creation
  string name = 1;
  string family = 2;
  string mobile = 3;
  string password = 4;
  uint64 role_id = 5;
  
  // Optional fields
  optional string email = 6;
  optional string username = 7;

}

message UpdateUserRequest {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1;
}

message GetAllUsersResponse {
  repeated User users = 1;
}

message ActivateUserRequest {
  uint64 user_id = 1;
}

message ActivateUserByPhoneRequest {
  string phone = 1;
}

message ActivateUserByEmailRequest {
  string email = 1;
}

message DeactivateUserRequest {
  uint64 user_id = 1;
}

message VerifyMobileOTPRequest {
  uint64 user_id = 1;
  string otp = 2;
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserByPhoneRequest {
  string phone = 1;
}

message GetUserByUsernameRequest {
  string username = 1;
}

message ChangePasswordRequest {
  uint64 user_id = 1;
  string old_password = 2;
  string new_password = 3;
}

message ResetPasswordRequest {
  uint64 user_id = 1;
  string new_password = 2;
}

message AssignRoleToUserRequest {
  int32 user_id = 1;
  uint64 role_id = 2;
}

message RemoveRoleFromUserRequest {
  int32 user_id = 1;
}

message GetUserRoleRequest {
  int32 user_id = 1;
}

message UserResponse {
  User user = 1;
}

message RoleResponse {
  Role role = 1;
}

message StatusResponse {
  bool success = 1;
  string message = 2;
}

// OTP Service Messages
message GenerateOTPRequest {
  // Either user_id or mobile must be provided
  optional uint64 user_id = 1; 
  optional string mobile = 2;
}

message GenerateOTPResponse {
  string otp = 1;
}

message VerifyOTPRequest {
  uint64 user_id = 1;
  string otp = 2;
}

message VerifyOTPResponse {
  bool is_valid = 1;
}

message ResendOTPRequest {
  uint64 user_id = 1;
}

// Main User service
service UserService {
  // User CRUD operations
  rpc GetUserByID(GetUserByIDRequest) returns (UserResponse);
  rpc CreateUser(CreateUserRequest) returns (UserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (StatusResponse);
  rpc GetAllUsers(google.protobuf.Empty) returns (GetAllUsersResponse);
  
  // User status operations
  rpc ActivateUser(ActivateUserRequest) returns (StatusResponse);
  rpc ActivateUserByPhone(ActivateUserByPhoneRequest) returns (StatusResponse);
  rpc ActivateUserByEmail(ActivateUserByEmailRequest) returns (StatusResponse);
  rpc DeactivateUser(DeactivateUserRequest) returns (StatusResponse);
  
  // Authentication & OTP
  rpc VerifyMobileOTP(VerifyMobileOTPRequest) returns (StatusResponse);
  
  // User lookup
  rpc GetUserByEmail(GetUserByEmailRequest) returns (UserResponse);
  rpc GetUserByPhone(GetUserByPhoneRequest) returns (UserResponse);
  rpc GetUserByUsername(GetUserByUsernameRequest) returns (UserResponse);
  
  // Password management
  rpc ChangePassword(ChangePasswordRequest) returns (StatusResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (StatusResponse);
  
  // Role management
  rpc AssignRoleToUser(AssignRoleToUserRequest) returns (StatusResponse);
  rpc RemoveRoleFromUser(RemoveRoleFromUserRequest) returns (StatusResponse);
  rpc GetUserRole(GetUserRoleRequest) returns (RoleResponse);
  
  // Multi-step registration process
  rpc RegisterMobile(RegisterMobileRequest) returns (RegisterMobileResponse);
  rpc VerifyAndCreateUser(VerifyAndCreateUserRequest) returns (VerifyAndCreateUserResponse);
  rpc AdminCreateUser(AdminCreateUserRequest) returns (AdminCreateUserResponse);
}

// OTP Service
service UserOTPService {
  rpc GenerateOTP(GenerateOTPRequest) returns (GenerateOTPResponse);
  rpc VerifyOTP(VerifyOTPRequest) returns (VerifyOTPResponse);
  rpc ResendOTP(ResendOTPRequest) returns (StatusResponse);
  
  // New method specifically for registration
  rpc GenerateRegistrationOTP(RegisterMobileRequest) returns (StatusResponse);
  rpc VerifyRegistrationOTP(VerifyOTPRequest) returns (VerifyOTPResponse);
}

// SMS Service
service UserSMSService {
  // Updated to use the revised GenerateOTPRequest
  rpc SendOTP(GenerateOTPRequest) returns (StatusResponse);
  rpc ResendOTP(ResendOTPRequest) returns (StatusResponse);
  
  // New method for registration SMS
  rpc SendRegistrationOTP(RegisterMobileRequest) returns (StatusResponse);
} 