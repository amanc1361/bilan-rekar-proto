syntax = "proto3";

package user.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/amanc1361/bilan-rekar-proto/gen/proto/user/v1";

// User message represents a user entity
message User {
  uint64 id = 1;
  string name = 2;
  string family = 3;
  string mobile = 4;
  optional string email = 5;
  string username = 6;
  // Password is not included in responses
  string password = 7;
  uint64 role_id = 8;
  Role role = 9;
  

 
 
}

// Role message represents a user role
message Role {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  repeated string permissions = 4;
}

// Request and response messages for UserService

message GetUserByIDRequest {
  string id = 1;
}

message CreateUserRequest {
  User user = 1;
}

message UpdateUserRequest {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1;
}

message GetAllUsersResponse {
  repeated User users = 1;
}

message ActivateUserRequest {
  uint64 user_id = 1;
}

message ActivateUserByPhoneRequest {
  string phone = 1;
}

message ActivateUserByEmailRequest {
  string email = 1;
}

message DeactivateUserRequest {
  uint64 user_id = 1;
}

message RegisterWithMobileOTPRequest {
  User user = 1;
}

message VerifyMobileOTPRequest {
  uint64 user_id = 1;
  string otp = 2;
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserByPhoneRequest {
  string phone = 1;
}

message GetUserByUsernameRequest {
  string username = 1;
}

message ChangePasswordRequest {
  uint64 user_id = 1;
  string old_password = 2;
  string new_password = 3;
}

message ResetPasswordRequest {
  uint64 user_id = 1;
  string new_password = 2;
}

message AssignRoleToUserRequest {
  int32 user_id = 1;
  uint64 role_id = 2;
}

message RemoveRoleFromUserRequest {
  int32 user_id = 1;
}

message GetUserRoleRequest {
  int32 user_id = 1;
}

message GetUserBusinessesRequest {
  int32 user_id = 1;
}

message Business {
  uint64 id = 1;
  string name = 2;
  // Other business fields as needed
}

message GetUserBusinessesResponse {
  repeated Business businesses = 1;
}

message GetUsersByBusinessIDRequest {
  uint64 business_id = 1;
}

message GetUsersByBusinessIDResponse {
  repeated User users = 1;
}

message GetUserFinancialPeriodsRequest {
  int32 user_id = 1;
}

message FinancialPeriod {
  uint64 id = 1;
  string period = 2;
  int32 year = 3;
  // Other financial period fields as needed
}

message GetUserFinancialPeriodsResponse {
  repeated FinancialPeriod financial_periods = 1;
}

message GetUsersByFinancialPeriodIDRequest {
  uint64 period_id = 1;
}

message GetUsersByFinancialPeriodIDResponse {
  repeated User users = 1;
}

message SearchUsersRequest {
  string query = 1;
}

message SearchUsersResponse {
  repeated User users = 1;
}

message GetUsersByStatusRequest {
  bool active = 1;
}

message GetUsersByStatusResponse {
  repeated User users = 1;
}

message GetUsersCreatedBetweenRequest {
  string start_date = 1;
  string end_date = 2;
}

message GetUsersCreatedBetweenResponse {
  repeated User users = 1;
}

// OTP Service Messages
message GenerateOTPRequest {
  uint64 user_id = 1;
}

message GenerateOTPResponse {
  string otp = 1;
}

message VerifyOTPRequest {
  uint64 user_id = 1;
  string otp = 2;
}

message VerifyOTPResponse {
  bool is_valid = 1;
}

message ResendOTPRequest {
  uint64 user_id = 1;
}

message UserResponse {
  User user = 1;
}

message RoleResponse {
  Role role = 1;
}

message StatusResponse {
  bool success = 1;
  string message = 2;
}

// Main User service
service UserService {
  // User CRUD operations
  rpc GetUserByID(GetUserByIDRequest) returns (UserResponse);
  rpc CreateUser(CreateUserRequest) returns (UserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (StatusResponse);
  rpc GetAllUsers(google.protobuf.Empty) returns (GetAllUsersResponse);
  
  // User status operations
  rpc ActivateUser(ActivateUserRequest) returns (StatusResponse);
  rpc ActivateUserByPhone(ActivateUserByPhoneRequest) returns (StatusResponse);
  rpc ActivateUserByEmail(ActivateUserByEmailRequest) returns (StatusResponse);
  rpc DeactivateUser(DeactivateUserRequest) returns (StatusResponse);
  
  // Authentication & OTP
  rpc RegisterWithMobileOTP(RegisterWithMobileOTPRequest) returns (UserResponse);
  rpc VerifyMobileOTP(VerifyMobileOTPRequest) returns (StatusResponse);
  
  // User lookup
  rpc GetUserByEmail(GetUserByEmailRequest) returns (UserResponse);
  rpc GetUserByPhone(GetUserByPhoneRequest) returns (UserResponse);
  rpc GetUserByUsername(GetUserByUsernameRequest) returns (UserResponse);
  
  // Password management
  rpc ChangePassword(ChangePasswordRequest) returns (StatusResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (StatusResponse);
  
  // Role management
  rpc AssignRoleToUser(AssignRoleToUserRequest) returns (StatusResponse);
  rpc RemoveRoleFromUser(RemoveRoleFromUserRequest) returns (StatusResponse);
  rpc GetUserRole(GetUserRoleRequest) returns (RoleResponse);
  
  // Business access
  rpc GetUserBusinesses(GetUserBusinessesRequest) returns (GetUserBusinessesResponse);
  rpc GetUsersByBusinessID(GetUsersByBusinessIDRequest) returns (GetUsersByBusinessIDResponse);
  
  // Financial period access
  rpc GetUserFinancialPeriods(GetUserFinancialPeriodsRequest) returns (GetUserFinancialPeriodsResponse);
  rpc GetUsersByFinancialPeriodID(GetUsersByFinancialPeriodIDRequest) returns (GetUsersByFinancialPeriodIDResponse);
  
  // Search and filter
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
  rpc GetUsersByStatus(GetUsersByStatusRequest) returns (GetUsersByStatusResponse);
  rpc GetUsersCreatedBetween(GetUsersCreatedBetweenRequest) returns (GetUsersCreatedBetweenResponse);
}

// OTP Service
service UserOTPService {
  rpc GenerateOTP(GenerateOTPRequest) returns (GenerateOTPResponse);
  rpc VerifyOTP(VerifyOTPRequest) returns (VerifyOTPResponse);
  rpc ResendOTP(ResendOTPRequest) returns (StatusResponse);
}

// SMS Service
service UserSMSService {
  rpc SendOTP(GenerateOTPRequest) returns (StatusResponse);
  rpc ResendOTP(ResendOTPRequest) returns (StatusResponse);
}